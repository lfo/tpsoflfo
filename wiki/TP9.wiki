# instruction du TP9 

= TP9 =

  Créer une couche métier utilisant des EJB stateless gérant les entités des TPs précédents. 

== Solution 1 ==

  Au vu de la simplification apportée à nos DAOs par JPA, vous jugez que leur code est trop simpliste et revient à la responsabilité des EJBs à créer.

== Solution 2 == 

  Vous déléguez la responsabilité de la gestion de la persistance à vos DAO, et récupérer la gestion des transactions au niveau des EJBs à créer. 

REM : préférez la solution 2!

= Environnement = 

Configuration des différents environnements. En effet, il est nécessaire de gérer les librairies contenant les APIs EJB pour compiler. Il faut aussi un environnement d'exécution des tests. Finalement, il faut packager l'application afin de la déployer dans un serveur d'application.

== Compilation ==

  Ajout de la dépendance glassfish et de son repository dans Maven :

 {{{
 <repositories>
         ...
        <repository>
		<id>glassfish-maven-repository.dev.java.net</id>
		<name>GlassFish Maven Repository</name>
		<url>http://download.java.net/maven/glassfish</url>
	</repository>       
</repositories>
<dependencies>
	...
	<dependency>
		<groupId>org.glassfish.extras</groupId>
		<artifactId>glassfish-embedded-all</artifactId>
		<version>3.1-b41</version>
	</dependency>
</dependencies>

}}} 

== packaging ==

[http://docs.codehaus.org/display/MAVENUSER/Multi-modules+projects]

== Un conteneur pour les tests ==

 Glassfish nous offre une API nous permettant de créer un container, il suffit de s'en servir dans nos tests.

{{{

    private static EJBContainer ec;
    private static Context ctx;

    @BeforeClass
    public static void initContainer() throws Exception {
        Map<String, Object> properties = new HashMap<String, Object>();
        properties.put(EJBContainer.MODULES, new File("target/classes"));
        ec = EJBContainer.createEJBContainer(properties);
        ctx = ec.getContext();
    }

    @AfterClass
    public static void closeContainer() throws Exception {
        if (ec != null)
            ec.close();
    }

}}}
== Un conteneur de déploiement ==

Installation et exécution de Glassfish

  * Téléchargement [http://glassfish.java.net/downloads/3.1-final.html]

  * Instruction : [http://glassfish.java.net/docs/3.1/quick-start-guide.pdf]
 
  * ajouter la datasource dans le {{{path_to_glassfish3\glassfish\domains\domain1\config\domain.xml }}}

{{{
    <jdbc-resource pool-name="H2Pool" jndi-name="jdbc/__default" />

    <jdbc-connection-pool is-isolation-level-guaranteed="false" name="HsqldbPool" driver-classname="org.hsqldb.jdbcDriver" res-type="java.sql.Driver">
      <property value="9001" name="PortNumber" />
      <property value="" name="Password" />
      <property value="sa" name="User" />
      <property value="localhost" name="serverName" />
      <property value="jdbc:hsqldb:mem:foobar" name="URL" />
    </jdbc-connection-pool>

}}}


  * Déploiement de l'application packagée

{{{

}}}